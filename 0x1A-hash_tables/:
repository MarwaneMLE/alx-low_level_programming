#include "hash_tables.h"
/**
 * hash_table_set - adds an element to the hash table
 * @ht: target hash table to add or update the key/value
 * @key: is a string
 * @value: value associated with the key
 * Return: 1 if it succeeded, 0 otherwise
 */
int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
	unsigned long int index;
	hash_node_t *new_node, *current;

	/* Check for invalid inputs */
	if (ht == NULL || key == NULL || *key == '\0' || value == NULL)
		return (0);
	/* Calculate the index for the key using the key_index function */
	index = key_index((const unsigned char *)key, ht->size);
	current = ht->array[index];
	/* Search for the key in the linked list at the calculated index*/
	while (current != NULL)
	{
		if (strcmp(current->key, key) == 0)
		{
			/* Update the value if the key already exists*/
			free(current->value);
			current->value = strdup(value);
			if (current->value == NULL)
				return (0);
			return (i);
		}
		current = current->next;
        }
	/*If the key is not found, create a new node and add it to the list*/
	new_node = malloc(sizeof(hash_node_t));
	if (new_node == NULL)
		return (0);
	new_node->key = strdup(key);
	if (new_node->key == NULL)
	{
		free(new_node);
		return (0);
	}
	new_node->value = strdup(value);
	if (new_node->value == NULL)
	{
		free(new_node->key);
		free(new_node);
		return (0);
	}
	/*Add the new node to the beginning of the linked list*/
	new_node->next = ht->array[index];
	ht->array[index] = new_node;
	return(1);
}
